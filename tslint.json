{
  "extends": [
    "tslint:recommended",
    "tslint-eslint-rules",
    "tslint-react"
  ],
  "rules": {
    "arrow-parens": [true, // disallow parens around single argument arrow functions
      "ban-single-arg-parens"
    ],
    "ban": [true,
      ["_", "extend"],
      ["_", "isNull"],
      ["_", "isDefined"]
    ],
    "curly": [true,
      "ignore-same-line" // don't enforce braces in single line conditionals
    ],
    "file-header": [
      true,
      "Copyright \\d{4}-\\d{4} Allegro.pl"
    ],
    "indent": [true, "spaces", 2],
    "interface-name": [true, "never-prefix"], // don't allow prefixing interface names with "I"
    "jsdoc-format": [true, "check-multiline-start"], // don't allow text after "/**" in first line
    "max-line-length": [true, 200],
    "member-access": false, // don't require explicit member access declaration
    "member-ordering": [true,
      "static-before-instance"
    ],
    "no-console": [true,
      "debug",
      "info",
      "time",
      "timeEnd",
      "trace"
    ],
    "no-inferrable-types": true, // enforce const x = 1 instead of const x: number = 1
    "no-require-imports": false, // allow require() style imports
    "no-string-literal": false, // allow opj["property"] syntax
    "no-var-requires": false, // allow assignment of required modules
    "object-literal-sort-keys": false, // allow unordered keys in object literals
    "ordered-imports": true,
    "quotemark": [true, // enforce double quotes, single only to avoid escapes, disallow unnecessary templates
      "double",
      "jsx-double",
      "avoid-escape",
      "avoid-template"
    ],
    "trailing-comma": [true, // disallow a trailing comma after last element of list like constructs
      {
        "singleline": "never",
        "multiline": "never"
      }
    ],

    // tslint-eslint-rules
    "array-bracket-spacing": [true, // disallow spaces after opening and before closing array brackets
      "never"
    ],
    "object-curly-spacing": [true, // enforce spaces in curly braces in objects literals, imports and destructuring
      "always"
    ],

    "jsx-no-bind": true, // disallow function binding in props (binding creates new function value and forces rerender of component)
    "jsx-no-string-ref": true, // passing string refs is discouraged in React now
    "no-angle-bracket-type-assertion": true, // enforce consistent "as X" type assertion style, "<X>" style is not compatible with TSX
    "no-empty": true, // disallow empty function / method bodies
    "forin": true, // enforces iteration on own properties only
    "no-empty-interface": true, // disallow empty named interfaces, replace with {}
    "jsx-self-close": true, // enforce self closing of empty jsx elements
    "jsx-space-before-trailing-slash": true, // enforce space before "/>" in empty jsx elements
    "jsx-key": true, // enforce key properties on elements in lists (reconciliation performance)
    "no-unused-variable": true, // disallow unused variables
    "no-var-keyword": true,
    "prefer-const": true, // prefer consts where possible instead of lets
    "no-duplicate-variable": true, // disallow duplicate variable declaration in the same block, not needed after we get rid of vars
    "no-unused-expression": true, // disallow unused expressions, currently many "to.equal(true)" expectations trigger it
    "ban-types": true, // ban general Function type and uppercase simple types (String, Number, Boolean, ...)

    // TODO: easy ones
    "no-conditional-assignment": false, // disallow assignment in conditional condition statements

    // TODO: harder
    "no-any": false, // disallow declarations of "any" type
    "no-shadowed-variable": false, // disallow variable shadowing
    "jsx-no-multiline-js": false, // disallow multiline js in jsx (reduces readability)
    "jsx-no-lambda": false, // disallow lambda in props (creates new function value and forces rerender of component)
    "jsx-wrap-multiline": false, // enforce wrapping of multiline jsx elements in parens (React's de facto standard)

    // TODO: no so sure if we should bother
    "only-arrow-functions": false, // disallow anonymous functions (function() { }) - does not work properly
    "jsx-alignment": false, // enforces consistent multiline elements alignment
    "max-classes-per-file": false, // disallow multiple classes in a single file - is it bad thing?
    "variable-name": false // enforce consistent variable naming
  }
}
